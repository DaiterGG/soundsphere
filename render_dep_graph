#!/bin/luajit
local deps = require("sphere.deps")

local exclude_nodes = {
	"game",
	"configModel",
}
for _, v in ipairs(exclude_nodes) do
	exclude_nodes[v] = true
	deps[v] = nil
end

for k, list in pairs(deps) do
	for i = 1, #list do
		if exclude_nodes[list[i]] then
			table.remove(list, i)
		end
	end
end

local function includes(t, v)
	for _, _v in ipairs(t) do
		if _v == v then
			return true
		end
	end
end

local function get_above(name)
	local out = {}
	for k, v in pairs(deps) do
		if includes(v, name) then
			table.insert(out, k)
		end
	end
	return out
end

local node_types = {}
for k, list in pairs(deps) do
	node_types[k] = node_types[k] or {}
	if #list > 0 then
		node_types[k]._out = true
	end
	if #get_above(k) > 0 then
		node_types[k]._in = true
	end
end

local function get_color(name)
	local t = node_types[name] or {}
	if t._in and t._out then
		return "#eeeeee"
	elseif t._in then
		return "#ffffb4"
	elseif t._out then
		return "#b3b3ff"
	end
	return "#ffffff"
end

local buf = {}
table.insert(buf, "digraph {")
table.insert(buf, "overlap=prism")
for k, w in pairs(deps) do
	for _, v in ipairs(w) do
		if not exclude_nodes[k] and not exclude_nodes[v] then
			if #deps[k] > 0 and #deps[v] > 0 then
				table.insert(buf, ("%s -> %s"):format(k, v))

				table.insert(buf, ("%s [style=filled, fillcolor=%q]"):format(k, get_color(k)))
				table.insert(buf, ("%s [style=filled, fillcolor=%q]"):format(v, get_color(v)))
			end
		end
	end
end
table.insert(buf, "}")

local p = assert(io.popen("sfdp -Tpng -o graph.png", "w"))
p:write(table.concat(buf, "\n"))
p:close()
